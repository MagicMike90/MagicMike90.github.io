{"version":3,"sources":["webpack:///./src/pages/404.js","webpack:///./src/components/seo.js"],"names":["NotFoundPage","render","siteTitle","this","props","data","site","siteMetadata","title","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_Layout__WEBPACK_IMPORTED_MODULE_2__","location","_components_seo__WEBPACK_IMPORTED_MODULE_3__","React","Component","pageQuery","SEO","_ref","description","lang","meta","keywords","gatsby__WEBPACK_IMPORTED_MODULE_4__","query","detailsQuery","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired"],"mappings":"8LAMMA,4FACJC,OAAA,WAAS,IAEDC,EADWC,KAAKC,MAAdC,KACeC,KAAKC,aAAaC,MAEzC,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,SAAUV,KAAKC,MAAMS,SAAUL,MAAON,GAC5CO,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKN,MAAM,mBACXC,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,2EATmBI,IAAMC,WAelBhB,YAER,IAAMiB,EAAS,sHClBtB,SAASC,EAATC,GAA2D,IAA5CC,EAA4CD,EAA5CC,YAAaC,EAA+BF,EAA/BE,KAAMC,EAAyBH,EAAzBG,KAAMC,EAAmBJ,EAAnBI,SAAUf,EAASW,EAATX,MAChD,OACEC,EAAAC,EAAAC,cAACa,EAAA,EAAD,CACEC,MAAOC,EACPzB,OAAQ,SAAAI,GACN,IAAMsB,EACJP,GAAef,EAAKC,KAAKC,aAAaa,YACxC,OACEX,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CACEmB,eAAgB,CACdR,QAEFb,MAAOA,EACPsB,cAAa,QAAUzB,EAAKC,KAAKC,aAAaC,MAC9Cc,KAAM,CACJ,CACES,KAAI,cACJC,QAASL,GAEX,CACEM,SAAQ,WACRD,QAASxB,GAEX,CACEyB,SAAQ,iBACRD,QAASL,GAEX,CACEM,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAAS3B,EAAKC,KAAKC,aAAa2B,QAElC,CACEH,KAAI,gBACJC,QAASxB,GAEX,CACEuB,KAAI,sBACJC,QAASL,IAGVQ,OACCZ,EAASa,OAAS,EACd,CACEL,KAAI,WACJC,QAAST,EAASc,KAAT,OAEX,IAELF,OAAOb,MAtDlBjB,KAAAiC,IA8DJpB,EAAIqB,aAAe,CACjBlB,KAAI,KACJC,KAAM,GACNC,SAAU,IAGZL,EAAIsB,UAAY,CACdpB,YAAaqB,IAAUC,OACvBrB,KAAMoB,IAAUC,OAChBpB,KAAMmB,IAAUE,MAChBpB,SAAUkB,IAAUG,QAAQH,IAAUC,QACtClC,MAAOiC,IAAUC,OAAOG,YAGX3B,MAEf,IAAMQ,EAAY","file":"component---src-pages-404-js-1fb3d733954fda6c1cf4.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\n\nclass NotFoundPage extends React.Component {\n  render() {\n    const { data } = this.props;\n    const siteTitle = data.site.siteMetadata.title;\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"404: Not Found\" />\n        <h1>Not Found</h1>\n        <p>You just hit a route that doesn&#39;t exist... thexw sadness.</p>\n      </Layout>\n    );\n  }\n}\n\nexport default NotFoundPage;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}