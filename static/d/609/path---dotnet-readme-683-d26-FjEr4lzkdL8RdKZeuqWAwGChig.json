{"data":{"site":{"siteMetadata":{"title":"Michael Blog","author":"Michael Luo"}},"markdownRemark":{"id":"3cb0e212-e2b6-5f8d-b56f-00e9f451e10b","excerpt":"Dotnet notes Dotnet MVC Dotnet API Duck Typing Install Angular 5 app with dotnet cli Installl the templates Create a new Angular App Change Enviroment variable…","html":"<h1>Dotnet notes</h1>\n<h2>Dotnet MVC</h2>\n<h2>Dotnet API</h2>\n<h2>Duck Typing</h2>\n<h2>Install Angular 5 app with dotnet cli</h2>\n<ol>\n<li>Installl the templates</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet new --install Microsoft.DotNet.Web.Spa.ProjectTemplates::2.0.0-rc1-final</code></pre></div>\n<ol start=\"2\">\n<li>Create a new Angular App</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet new angular -o ProjectName</code></pre></div>\n<ol start=\"3\">\n<li>Change Enviroment variable to “Development”</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">SET ASPNETCORE_Environment<span class=\"token operator\">=</span>Development</code></pre></div>\n<ol start=\"4\">\n<li>Buidl the application</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet build</code></pre></div>\n<p>Or</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ASPNETCORE_ENVIRONMENT<span class=\"token operator\">=</span>Development dotnet <span class=\"token function\">watch</span> run\n\n<span class=\"token comment\">## migrate a database</span>\n**Code-First** Migrations: giving the developer a chance to alter the Database schema without having to drop/recreate the whole thing <span class=\"token keyword\">in</span> Production.\n\n``` <span class=\"token function\">bash</span>\ndotnet ef migrations add <span class=\"token string\">\"Identity\"</span> -o <span class=\"token string\">\"Data/Migrations\"</span></code></pre></div>\n<h2>update a database</h2>\n<ul>\n<li>option 1: update</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet ef database update</code></pre></div>\n<ul>\n<li>option 2: drop and recreate</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet ef database drop\ndotnet ef database update</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ASPNETCORE_ENVIRONMENT<span class=\"token operator\">=</span>Development dotnet run</code></pre></div>\n<h3>Depency injection</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AddTransient&#x3C;service,implType>()</td>\n<td>This method tells the service provider to create a new instance of the implementation type for every dependency on the service type. See the “Using the Transient Life Cycle” section.</td>\n</tr>\n<tr>\n<td>AddTransient<service>()</td>\n<td>This method is used to register a single type, which will be instantiated for every dependency, as described in the “Using Dependency Injection for Concrete Types” section.</td>\n</tr>\n<tr>\n<td>AddTransient<service>(factoryFunc)</td>\n<td>This method is used to register a factory function that will be invoked to create an implementation object for every dependency on the service type, as described in the “Using a Factory Function” section.</td>\n</tr>\n<tr>\n<td>AddScoped&#x3C;service, implType>() AddScoped<service>() AddScoped<service>(factoryFunc)</td>\n<td>These methods tell the service provider to reuse instances of the implementation type so that all service requests made by components associated with a common scope, which is usually a single HTTP request, share the same object. These methods follow the same pattern as the corresponding AddTransientmethods. See the “Using the Scoped Life Cycle” section.</td>\n</tr>\n<tr>\n<td>AddSingleton&#x3C;service, implType>() AddSingleton<service>() AddSingleton&#x3C;service(factoryFunc)</td>\n<td>These methods tell the service provider to create a new instance of the implementation type for the first service request and then reuse it for every subsequent service request. See the “Using the Singleton Life Cycle” section.</td>\n</tr>\n<tr>\n<td>AddSingleton<service>(instance)</td>\n<td>This method provides the service provider with an object that should be used to service all service requests. The service provider will not create any new objects.</td>\n</tr>\n</tbody>\n</table>\n<h2>Razor</h2>\n<h3>View location Expender</h3>\n<p>Razor uses view location expanders to build up a list of locations that should be searched for a view. View location expanders implement the IViewLocationExpander interface</p>\n<h2>Claim and Policy</h2>\n<p>A claim is a piece of information about the user, along with some information about where the information came from.</p>\n<p>Policy works with claims to manage user access to the application more flexibly than with standard roles.</p>\n<h2>Model convention</h2>","frontmatter":{"title":"Dotnet Notes!","date":"January 31, 2019"}}},"pageContext":{"slug":"dotnet-readme","previous":{"fields":{"slug":"dev-ops-aws"},"frontmatter":{"title":"AWS Notes!"}},"next":{"fields":{"slug":"database-compare"},"frontmatter":{"title":"Datebase Notes!"}}}}