{"data":{"site":{"siteMetadata":{"title":"Michael Blog","author":"Michael Luo"}},"markdownRemark":{"id":"c048899d-a5cd-55cd-9b8c-8b761d9647c8","excerpt":"Notes for test Unit test The unit tests are used to prove the smallest testable part of a computer program.In this sense, the great challenge is to write codeâ€¦","html":"<h1>Notes for test</h1>\n<h2>Unit test</h2>\n<p>The unit tests are used to prove the smallest testable part of a computer program.In this sense, the great challenge is to write code that is testable; otherwise, it will be impossible to apply the unit tests.</p>\n<p>When we create the unit test, we have to use a mechanism so that the function test does not touch the database. The mechanism is commonly known as a <strong>mock</strong>.When applying a mock to the unit test, we isolate the function we want to test, then any possible changes in the database will not create conflict in the unit test scenarios.</p>\n<h2>Integration tests</h2>\n<p>Like unit tests, integration tests must also be deterministic, but they do not prove only an isolated segment of the code. Integration tests, in the case of microservices, will validate the entire flow from the starting point of the test to the last interaction; it could be a vendor app or a database, as an example.</p>\n<h2>End-to-end tests</h2>\n<p>The end-to-end tests are conceptually similar to integration tests, but they validate the entire business flow of the application. The main purpose of this type of test is to check whether any flow stages are corrupted. Many developers get confused about the difference between end-to-end and integration tests.</p>\n<p>examples:</p>\n<ol>\n<li>Create a user.</li>\n<li>Create a news article for each type of news service (famous, politics, and sports).</li>\n<li>Search for all news articles created in the test by sending the user_id function in the request cookie.</li>\n<li>Validate the recommendations created for the user.</li>\n</ol>\n<h2>Signature tests</h2>\n<p>Imagine a scenario where we have several development teams working on different microservices of the same application. These microservices have some communication between them; there is a kind of contract between them that is the payload of the microservice, also known as the <strong>Service Signature</strong>. One of the development teams modifies the signature of the microservice causing errors in other parts of the application.</p>\n<p>When a microservice has the signature changed, a task must be generated for the other development teams responsible for microservices that integrate with this signature.</p>\n<h2>Monkey tests</h2>\n<p>Monkey tests are usually automated tests with random values that target identified errors in the application. Normally, the errors that emerge in this type of test are due to a failure of treatment in the input or slowness in the treatment of input owing to the stress of the application.</p>\n<p>In general, the monkey test is useful for identifying out-of-the-box errors.</p>\n<p><strong>Chaos Monkey</strong> has the following test categories:</p>\n<ul>\n<li>Chaos Gorilla: This simulates the unavailability of an entire zone of availability</li>\n<li>Conformity Monkey: This closes instances that do not adhere to best practices</li>\n<li>Doctor Monkey: This performs performance checks (similar to a CPU)</li>\n<li>Janitor Monkey: This searches for unused resources and deletes them</li>\n<li>Latency Monkey: This creates artificial delays in client-server communication</li>\n<li>Security Monkey: This encounters security vulnerabilities, such as non-security groups configured properly</li>\n</ul>","frontmatter":{"title":"Notes for testing!","date":"July 21, 2019"}}},"pageContext":{"slug":"testing","previous":{"fields":{"slug":"frontend"},"frontmatter":{"title":"Frontend Notes!"}},"next":{"fields":{"slug":"angular"},"frontmatter":{"title":"Angular Notes!"}}}}