{"data":{"site":{"siteMetadata":{"title":"Michael Blog","author":"Michael Luo"}},"markdownRemark":{"id":"ecbab28d-7cc0-5b52-a26d-e9c525184627","excerpt":"NodeJS security Code injection Indentify code injections Avoid shell injection Database injection Avoid SQL injection Mitigate injection attacks in NoSQLâ€¦","html":"<h1>NodeJS security</h1>\n<h2>Code injection</h2>\n<ul>\n<li>Indentify code injections</li>\n<li>Avoid shell injection</li>\n</ul>\n<h2>Database injection</h2>\n<ul>\n<li>Avoid SQL injection</li>\n<li>Mitigate injection attacks in NoSQL database</li>\n</ul>\n<h2>Concurency</h2>\n<h2>Authendication</h2>\n<ul>\n<li>Enforce password strenghth rules</li>\n<li>Move passowrd to server</li>\n<li>Password recovery</li>\n<li>\n<p>And other authetication layers</p>\n<ul>\n<li>Two factor authentication</li>\n</ul>\n</li>\n</ul>\n<h2>Session management</h2>\n<ul>\n<li>Anonymize the sessionID</li>\n<li>Set time to live</li>\n<li>Re-create the session when the user logs in</li>\n<li>Bind the seesion to prevent hijacking</li>\n</ul>\n<h2>Access control</h2>\n<h2>Deniel of service attack</h2>\n<ul>\n<li>Avoid synchronous code</li>\n<li>Manage memory usage - read file size</li>\n<li>Avoid asymmetry</li>\n</ul>\n<h2>Cross-site scripting (XSS)</h2>\n<ol>\n<li>\n<p>Reflected XSS: which is a form of XSS where the injected script is reflected off the web server</p>\n</li>\n<li>\n<p>Stored XSS: where the injected script is stored on the server and executes when rendering the web page.</p>\n</li>\n<li>\n<p>DOM XSS (the fore two consider as server-side execution issues, this one is considerted as client-side execution)</p>\n</li>\n<li>\n<p>Prevent XSS through configuration of server</p>\n</li>\n<li>\n<p>Sanitize input foir relected/stored XSS</p>\n<ul>\n<li>Escape unstrustred data inserted into HTML element content</li>\n<li>\n<p>Sanitize HTML with a libary</p>\n<ul>\n<li>Bleach</li>\n<li>Sanitizer</li>\n</ul>\n</li>\n<li>Escape untrusted data inserted into HTML attributes</li>\n<li>Escape untrusted data inserted into JavaScript data values</li>\n<li>Escape JSON values in an HTML context and read the data with JSON.Parse</li>\n<li>Escape and validate untrusted data inserted into CSS property values</li>\n<li>Escape untrusted data insered into HTML url parameter values</li>\n</ul>\n</li>\n<li>\n<p>Sanitize input for DOM XSS</p>\n<ul>\n<li>Use DOM construction methods instead of HTML interpretation</li>\n<li>JavaScript and HTML encode before HTML subcontext</li>\n<li>Do not apply attribute encoding in DOM context</li>\n<li>Avoid execution subcontexts</li>\n<li>Do not apply css encoding in style context</li>\n<li>JavaScript and url encode when creating links</li>\n</ul>\n</li>\n</ol>\n<h2>Avoid cross-site request forgery (CSRF)</h2>\n<ul>\n<li>Synchronize tokens as part of CSRF protection</li>\n<li>Avoid setting up common CSRF pitfalls</li>\n</ul>\n<h2>Protect the data</h2>\n<ul>\n<li>Understand data flow</li>\n<li>Protect client application and data</li>\n<li>\n<p>Securely transfer data</p>\n<ul>\n<li>TSL and SLL</li>\n<li>proper logs</li>\n</ul>\n</li>\n<li>\n<p>Secure data stored within the application</p>\n<ul>\n<li>Oversharing was a common configuration problem in LAMP stacks because Apache had a default directory-sharing configuration that tried to disallow files of a certain type.</li>\n</ul>\n</li>\n</ul>\n<h2>Secure codebase</h2>","frontmatter":{"title":"NodeJS Security Notes!","date":"February 03, 2019"}}},"pageContext":{"slug":"/NodeJS/Security/","previous":{"fields":{"slug":"/NodeJS/README/"},"frontmatter":{"title":"NodeJS Notes!"}},"next":{"fields":{"slug":"/NodeJS/Cookbook/"},"frontmatter":{"title":"NodeJS Cookbook!"}}}}