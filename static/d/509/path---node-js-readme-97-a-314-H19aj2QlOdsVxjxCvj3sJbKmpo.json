{"data":{"site":{"siteMetadata":{"title":"Michael Blog","author":"Michael Luo"}},"markdownRemark":{"id":"2d359a48-1f9e-5c13-b36d-7c04b9354733","excerpt":"Notes for NodeJS Asynchronous batching and caching Batching \nIf we are invoking an asynchronous function while there is still another one pending, we can attachâ€¦","html":"<h1>Notes for NodeJS</h1>\n<h2>Asynchronous batching and caching</h2>\n<p><strong>Batching</strong>\nIf we are invoking an asynchronous function while there is still another one pending, we can attach callback to the already running operation, instead of creating a brand new request.</p>\n<p>Problems:\nThe faster the API, the fewer batched requests we get. Alought the API is fast enough, it still represents a factor in the resource load of an application.\nAlso, sometimes we can safely assume that the result of an API invocation will not change so often; therefore, a simple request batching willl not provide the best performance. In all these circumstances, the best candidate to reduce the load of an application and increase its responsiveness is definitely a more agressive caching pattern.</p>\n<p><strong>Catching</strong>\nAs soon as a request completes, we store its result in the catch, which can be a variable, an entry in the database, or in a specialized catching server. Hence, the next time the API is invoked, the result can be retrieved immediately from the cache, insead of spawning another request.</p>\n<h2>Running CPU-bound tasks</h2>\n<h2>Scalability</h2>\n<p><strong>Three dimesions</strong>\nx-axis: Cloning\ny-axis: Decomposing by service/functionality\nz-axis: Splitting by data partition</p>\n<p>vertical scaling - adding more resources to a single machine\nhorizontal scaling - adding more machines to the infrastructure</p>\n<p><strong>Cloning</strong></p>","frontmatter":{"title":"","date":null}}},"pageContext":{"slug":"node-js-readme","previous":{"fields":{"slug":"node-js-security"},"frontmatter":{"title":""}},"next":{"fields":{"slug":"microservices-readme"},"frontmatter":{"title":""}}}}