{"version":3,"sources":["webpack:///./src/templates/blog-post.js","webpack:///./src/components/seo.js"],"names":["Section","posed","section","enter","staggerChildren","staggerDirection","Title","h1","y","opacity","exit","P","p","BlogPostTemplate","render","post","this","props","data","markdownRemark","_this$props$pageConte","pageContext","previous","next","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Fragment","initialPose","pose","_components_seo__WEBPACK_IMPORTED_MODULE_4__","title","frontmatter","description","excerpt","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","fields","slug","rel","React","Component","pageQuery","SEO","_ref","lang","meta","keywords","gatsby__WEBPACK_IMPORTED_MODULE_4__","query","detailsQuery","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired"],"mappings":"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","file":"component---src-templates-blog-post-js-af3fdcdaf6cfaa65397f.js","sourcesContent":["import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport posed from \"react-pose\";\nimport SEO from \"../components/seo\";\nimport Layout from \"../components/Layout\";\n\nconst Section = posed.section({\n  enter: { staggerChildren: 50, staggerDirection: -1 }\n});\n\nconst Title = posed.h1({\n  enter: { y: 0, opacity: 1 },\n  exit: { y: 50, opacity: 0 }\n});\nconst P = posed.p({\n  enter: { y: 0, opacity: 1 },\n  exit: { y: 50, opacity: 0 }\n});\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark;\n    const { previous, next } = this.props.pageContext;\n\n    return (\n      <React.Fragment>\n        <Section initialPose=\"exit\" pose=\"enter\">\n          <SEO title={post.frontmatter.title} description={post.excerpt} />\n          <Title>{post.frontmatter.title}</Title>\n          <P>{post.frontmatter.date}</P>\n          <P dangerouslySetInnerHTML={{ __html: post.html }} />\n          <hr />\n\n          <ul\n            style={{\n              display: \"flex\",\n              flexWrap: \"wrap\",\n              justifyContent: \"space-between\",\n              listStyle: \"none\",\n              padding: 0\n            }}\n          >\n            <li>\n              {previous && (\n                <Link to={previous.fields.slug} rel=\"prev\">\n                  ← {previous.frontmatter.title}\n                </Link>\n              )}\n            </li>\n            <li>\n              {next && (\n                <Link to={next.fields.slug} rel=\"next\">\n                  {next.frontmatter.title} →\n                </Link>\n              )}\n            </li>\n          </ul>\n        </Section>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}