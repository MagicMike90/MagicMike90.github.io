{"version":3,"sources":["webpack:///./src/templates/blog-post.js","webpack:///./src/components/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","react_pose__WEBPACK_IMPORTED_MODULE_2__","styled_components__WEBPACK_IMPORTED_MODULE_3__","_components_seo__WEBPACK_IMPORTED_MODULE_4__","_components_Layout__WEBPACK_IMPORTED_MODULE_5__","PosedSection","posed","section","enter","staggerChildren","staggerDirection","StyledSection","styled","withConfig","displayName","componentId","Title","h1","y","opacity","exit","P","p","BlogPostTemplate","_ref","data","pageContext","location","post","markdownRemark","previous","next","a","createElement","initialPose","pose","title","frontmatter","description","excerpt","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel","SEO","lang","meta","keywords","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","query","detailsQuery","render","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,GAAAW,EAAAX,EAAA,KAAAY,EAAAZ,EAAA,IAOMa,EAAeC,IAAMC,QAAQ,CACjCC,MAAO,CAAEC,gBAAiB,GAAIC,kBAAmB,KAG7CC,EAAgBC,YAAOP,GAAVQ,WAAA,CAAAC,YAAA,2BAAAC,YAAA,gBAAGH,CAAH,sBAGbI,EAAQV,IAAMW,GAAG,CACrBT,MAAO,CAAEU,EAAG,EAAGC,QAAS,GACxBC,KAAM,CAAEF,EAAG,GAAIC,QAAS,KAEpBE,EAAIf,IAAMgB,EAAE,CAChBd,MAAO,CAAEU,EAAG,EAAGC,QAAS,GACxBC,KAAM,CAAEF,EAAG,GAAIC,QAAS,KAmDXI,UAhDU,SAAAC,GAAqC,IAAlCC,EAAkCD,EAAlCC,KAAMC,EAA4BF,EAA5BE,YAAaC,EAAeH,EAAfG,SACvCC,EAAOH,EAAKI,eACVC,EAAmBJ,EAAnBI,SAAUC,EAASL,EAATK,KAElB,OACEjC,EAAAkC,EAAAC,cAAC7B,EAAA,EAAD,CAAQuB,SAAUA,GAChB7B,EAAAkC,EAAAC,cAACtB,EAAD,CAAeuB,YAAY,OAAOC,KAAK,SACrCrC,EAAAkC,EAAAC,cAAC9B,EAAA,EAAD,CAAKiC,MAAOR,EAAKS,YAAYD,MAAOE,YAAaV,EAAKW,UACtDzC,EAAAkC,EAAAC,cAACjB,EAAD,KAAQY,EAAKS,YAAYD,OACzBtC,EAAAkC,EAAAC,cAACZ,EAAD,KAAIO,EAAKS,YAAYG,MAErB1C,EAAAkC,EAAAC,cAACZ,EAAD,CAAGoB,wBAAyB,CAAEC,OAAQd,EAAKe,QAE3C7C,EAAAkC,EAAAC,cAAA,WAEAnC,EAAAkC,EAAAC,cAAA,MACEW,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGXnD,EAAAkC,EAAAC,cAAA,UACGH,GACChC,EAAAkC,EAAAC,cAACjC,EAAA,EAAD,CAAMkD,GAAIpB,EAASqB,OAAOC,KAAMC,IAAI,QAApC,IAEG,IACAvB,EAASO,YAAYD,QAI5BtC,EAAAkC,EAAAC,cAAA,UACGF,GACCjC,EAAAkC,EAAAC,cAACjC,EAAA,EAAD,CAAMkD,GAAInB,EAAKoB,OAAOC,KAAMC,IAAI,QAC7BtB,EAAKM,YAAYD,MACjB,IAFH,UAeP,IAAMxC,EAAS,sHCpEtB,SAAS0D,EAAT9B,GAA2D,IAA5Cc,EAA4Cd,EAA5Cc,YAAaiB,EAA+B/B,EAA/B+B,KAAMC,EAAyBhC,EAAzBgC,KAAMC,EAAmBjC,EAAnBiC,SAAUrB,EAASZ,EAATY,MAChD,OACEsB,EAAA1B,EAAAC,cAAC0B,EAAA,EAAD,CACEC,MAAOC,EACPC,OAAQ,SAAArC,GACN,IAAMsC,EACJzB,GAAeb,EAAKuC,KAAKC,aAAa3B,YACxC,OACEoB,EAAA1B,EAAAC,cAACiC,EAAAlC,EAAD,CACEmC,eAAgB,CACdZ,QAEFnB,MAAOA,EACPgC,cAAa,QAAU3C,EAAKuC,KAAKC,aAAa7B,MAC9CoB,KAAM,CACJ,CACEa,KAAI,cACJC,QAASP,GAEX,CACEQ,SAAQ,WACRD,QAASlC,GAEX,CACEmC,SAAQ,iBACRD,QAASP,GAEX,CACEQ,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAAS7C,EAAKuC,KAAKC,aAAaO,QAElC,CACEH,KAAI,gBACJC,QAASlC,GAEX,CACEiC,KAAI,sBACJC,QAASP,IAGVU,OACChB,EAASiB,OAAS,EACd,CACEL,KAAI,WACJC,QAASb,EAASkB,KAAT,OAEX,IAELF,OAAOjB,MAtDlB/B,KAAAmD,IA8DJtB,EAAIuB,aAAe,CACjBtB,KAAI,KACJC,KAAM,GACNC,SAAU,IAGZH,EAAIwB,UAAY,CACdxC,YAAayC,IAAUC,OACvBzB,KAAMwB,IAAUC,OAChBxB,KAAMuB,IAAUE,MAChBxB,SAAUsB,IAAUG,QAAQH,IAAUC,QACtC5C,MAAO2C,IAAUC,OAAOG,YAGX7B,MAEf,IAAMO,EAAY","file":"component---src-templates-blog-post-js-2bca3b1bc18537c77ec8.js","sourcesContent":["import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport posed from 'react-pose';\nimport styled from 'styled-components';\nimport SEO from '../components/seo';\nimport Layout from '../components/Layout';\n\nconst PosedSection = posed.section({\n  enter: { staggerChildren: 50, staggerDirection: -1 },\n});\n\nconst StyledSection = styled(PosedSection)`\n  background: #fff;\n`;\nconst Title = posed.h1({\n  enter: { y: 0, opacity: 1 },\n  exit: { y: 50, opacity: 0 },\n});\nconst P = posed.p({\n  enter: { y: 0, opacity: 1 },\n  exit: { y: 50, opacity: 0 },\n});\n\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\n  const post = data.markdownRemark;\n  const { previous, next } = pageContext;\n\n  return (\n    <Layout location={location}>\n      <StyledSection initialPose=\"exit\" pose=\"enter\">\n        <SEO title={post.frontmatter.title} description={post.excerpt} />\n        <Title>{post.frontmatter.title}</Title>\n        <P>{post.frontmatter.date}</P>\n\n        <P dangerouslySetInnerHTML={{ __html: post.html }} />\n\n        <hr />\n\n        <ul\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n            listStyle: 'none',\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ←\n                {' '}\n                {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title}\n                {' '}\n→\n              </Link>\n            )}\n          </li>\n        </ul>\n      </StyledSection>\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}